if ((typeof(DiosqAwT1DBhTLq1ucomAd$3ast$3lex$0ast$3lex$1$4)) == "undefined") {DiosqAwT1DBhTLq1ucomAd$3ast$3lex$0ast$3lex$1$4 = {};
};
(function(){DiosqAwT1DBhTLq1ucomAd$3ast$3lex$0ast$3lex$1$4.analyze$3412 = function(text$3415){var program_text$3416 = [text$3415];
var lexer$3423 = DiosqAwT1DBhTLq1ucomAd$3ast$3lex$0ast$3lex$1$3.makeLexer$172(function(v$3777){var str$3778 = program_text$3416[0];
(program_text$3416[0] = "",0);
return str$3778;
});
var nexttok$3424 = [lexer$3423(0)];
var fix$4333 = {};
fix$4333.$display = function(){var v$3586 = (dQvcrgdPh2Rb0tWb4ecVml$3basis$0List$1.hd$674(nexttok$3424[0]))[0];
switch (v$3586[0]) { case 62: {return "EOF\n";
 break; }case 61: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "EQ\n" + (fix$4333.$display());
 break; }case 20: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "PIPE\n" + (fix$4333.$display());
 break; }case 39: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "IMPL\n" + (fix$4333.$display());
 break; }case 14: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "SEMICOLON\n" + (fix$4333.$display());
 break; }case 66: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "COMMA\n" + (fix$4333.$display());
 break; }case 41: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "HASHTAG\n" + (fix$4333.$display());
 break; }case 33: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "LPAREN\n" + (fix$4333.$display());
 break; }case 16: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "RPAREN\n" + (fix$4333.$display());
 break; }case 35: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "LBRACK\n" + (fix$4333.$display());
 break; }case 18: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "RBRACK\n" + (fix$4333.$display());
 break; }case 27: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "MUL\n" + (fix$4333.$display());
 break; }case 75: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "ADD\n" + (fix$4333.$display());
 break; }case 9: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "SUB\n" + (fix$4333.$display());
 break; }case 64: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "DIV\n" + (fix$4333.$display());
 break; }case 26: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "NEG\n" + (fix$4333.$display());
 break; }case 37: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "INEQ\n" + (fix$4333.$display());
 break; }case 31: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "LT\n" + (fix$4333.$display());
 break; }case 30: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "LTEQ\n" + (fix$4333.$display());
 break; }case 44: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "GT\n" + (fix$4333.$display());
 break; }case 43: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "GTEQ\n" + (fix$4333.$display());
 break; }case 72: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "ASSIGN\n" + (fix$4333.$display());
 break; }case 71: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "BANG\n" + (fix$4333.$display());
 break; }case 1: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "WILD\n" + (fix$4333.$display());
 break; }case 15: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "RSHIFT\n" + (fix$4333.$display());
 break; }case 32: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "LSHIFT\n" + (fix$4333.$display());
 break; }case 6: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "UBRACK\n" + (fix$4333.$display());
 break; }case 70: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "BBRACK\n" + (fix$4333.$display());
 break; }case 2: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "VAL\n" + (fix$4333.$display());
 break; }case 47: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "FUN\n" + (fix$4333.$display());
 break; }case 54: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "FIX\n" + (fix$4333.$display());
 break; }case 65: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "DATATYPE\n" + (fix$4333.$display());
 break; }case 60: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "EXCEPTION\n" + (fix$4333.$display());
 break; }case 67: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "CASE\n" + (fix$4333.$display());
 break; }case 19: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "RAISE\n" + (fix$4333.$display());
 break; }case 42: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "HANDLE\n" + (fix$4333.$display());
 break; }case 50: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "FN\n" + (fix$4333.$display());
 break; }case 34: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "LET\n" + (fix$4333.$display());
 break; }case 38: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "IN\n" + (fix$4333.$display());
 break; }case 63: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "END\n" + (fix$4333.$display());
 break; }case 23: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "OF\n" + (fix$4333.$display());
 break; }case 25: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "NEW\n" + (fix$4333.$display());
 break; }case 46: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "GET\n" + (fix$4333.$display());
 break; }case 69: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "BOXED\n" + (fix$4333.$display());
 break; }case 8: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "SUBSCRIPT\n" + (fix$4333.$display());
 break; }case 21: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "ORDOF\n" + (fix$4333.$display());
 break; }case 5: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "UNBOXEDASSIGN\n" + (fix$4333.$display());
 break; }case 3: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "UPDATE\n" + (fix$4333.$display());
 break; }case 4: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "UNBOXEDUPDATE\n" + (fix$4333.$display());
 break; }case 11: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "STORE\n" + (fix$4333.$display());
 break; }case 29: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "MAKEREF\n" + (fix$4333.$display());
 break; }case 28: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "MAKEREFUNBOXED\n" + (fix$4333.$display());
 break; }case 74: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "ALENGTH\n" + (fix$4333.$display());
 break; }case 12: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "SLENGTH\n" + (fix$4333.$display());
 break; }case 45: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "GETHDLR\n" + (fix$4333.$display());
 break; }case 13: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "SETHDLR\n" + (fix$4333.$display());
 break; }case 68: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "CALLCC\n" + (fix$4333.$display());
 break; }case 7: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "THROW\n" + (fix$4333.$display());
 break; }case 59: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "FADD\n" + (fix$4333.$display());
 break; }case 48: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "FSUB\n" + (fix$4333.$display());
 break; }case 58: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "FDIV\n" + (fix$4333.$display());
 break; }case 51: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "FMUL\n" + (fix$4333.$display());
 break; }case 57: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "FEQL\n" + (fix$4333.$display());
 break; }case 49: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "FNEQ\n" + (fix$4333.$display());
 break; }case 56: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "FGE\n" + (fix$4333.$display());
 break; }case 55: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "FGT\n" + (fix$4333.$display());
 break; }case 53: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "FLE\n" + (fix$4333.$display());
 break; }case 52: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "FLT\n" + (fix$4333.$display());
 break; }case 22: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "ORB\n" + (fix$4333.$display());
 break; }case 73: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "ANDB\n" + (fix$4333.$display());
 break; }case 0: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "XORB\n" + (fix$4333.$display());
 break; }case 24: {(nexttok$3424[0] = (lexer$3423(0)),0);
return "NOTB\n" + (fix$4333.$display());
 break; }case 36: {var v$3602 = v$3586[1];
(nexttok$3424[0] = (lexer$3423(0)),0);
return (("INT(" + (abSkfeMyxlIKxrMz4NXGul$3basis$0Int32$1.toString$456(v$3602))) + ")\n") + (fix$4333.$display());
 break; }case 17: {var v$3598 = v$3586[1];
(nexttok$3424[0] = (lexer$3423(0)),0);
return (("REAL(" + v$3598) + ")\n") + (fix$4333.$display());
 break; }case 10: {var v$3594 = v$3586[1];
(nexttok$3424[0] = (lexer$3423(0)),0);
return (("STRING" + v$3594) + ")\n") + (fix$4333.$display());
 break; }case 40: {var v$3590 = v$3586[1];
(nexttok$3424[0] = (lexer$3423(0)),0);
return (("ID(" + v$3590) + ")\n") + (fix$4333.$display());
 break; }default: {throw [sWBNi829bz3yxJwtxAWd8b$3basis$0Initial$1.en$Fail$52,"position in token location."];
} };
};
var display$3425 = fix$4333.$display;
return display$3425();
};
return 0;
})();
